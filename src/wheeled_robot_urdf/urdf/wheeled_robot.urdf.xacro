<?xml version="1.0"?>
<robot name="wheeled_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- include common macros, materials, etc. -->
  <xacro:include filename="common.xacro" />

  <!-- constants -->
  <xacro:property name="body_mass" value="5" />
  <xacro:property name="body_depth" value="0.2" />
  <xacro:property name="body_width" value="0.5" />
  <xacro:property name="body_height" value="0.3" />

  <xacro:property name="use_mesh_body" value="True" />
  <xacro:property name="mesh_filename" value="package://wheeled_robot_urdf/meshes/chassis.dae" />

  <xacro:property name="side_wheel_mass" value="1" />
  <xacro:property name="side_wheel_length" value="0.04" />
  <xacro:property name="side_wheel_radius" value="${3/6 * body_depth}" />
  <xacro:property name="side_wheel_offset_z" value="${1/5 * body_depth}" />

  <xacro:property name="caster_wheel_mass" value="0.5" />
  <xacro:property name="caster_wheel_radius" value="${side_wheel_radius / 2}" />

  <!-- macros -->
  
  <!-- See "List of moments of inertia" in Wikipedia -->
  <xacro:macro name="cylinder_inertia" params="mass radius length">
    <xacro:custom_inertia mass="${mass}" 
      ixx="${1/12 * mass * (3 * pow(radius, 2) + pow(length, 2))}" 
      iyy="${1/12 * mass * (3 * pow(radius, 2) + pow(length, 2))}" 
      izz="${1/2 * mass * pow(radius, 2)}" />
  </xacro:macro>

  <xacro:macro name="cuboid_inertia" params="mass width height depth">
    <xacro:custom_inertia mass="${mass}" 
          ixx="${1/12 * mass * (pow(width, 2) + pow(depth, 2))}" 
          iyy="${1/12 * mass * (pow(width, 2) + pow(depth, 2))}" 
          izz="${1/12 * mass * (pow(width, 2) + pow(height, 2))}" />
  </xacro:macro>

  <xacro:macro name="side_wheel" params="prefix reflect:=1">
    <link name="${prefix}_wheel">
      <visual>
        <material name="Red" />
        <geometry>
          <cylinder length="${side_wheel_length}" radius="${side_wheel_radius}" />
        </geometry>
      </visual>
      
      <collision>
        <geometry>
          <cylinder length="${side_wheel_length}" radius="${side_wheel_radius}" />
        </geometry>
      </collision>

      <xacro:cylinder_inertia mass="${side_wheel_mass}" 
        radius="${side_wheel_radius}" length="${side_wheel_length}" />
    </link>

    <joint name="base_to_${prefix}_wheel" type="continuous">
      <parent link="base_link" />
      <child link="${prefix}_wheel" />
      <axis xyz="0 0 1" />
      <origin xyz="${body_width/3} ${reflect * (body_height/2 + side_wheel_length/2)} -${body_depth/2 - side_wheel_offset_z}" 
        rpy="0 ${pi/2} ${pi/2}" />
    </joint>
  </xacro:macro>

  <!-- base link -->
  <link name="base_link">
    <visual>
      <material name="Black" />
      <geometry>
        <xacro:if value="${use_mesh_body}">
          <mesh filename="${mesh_filename}" scale="1.3 1 1" />
        </xacro:if>

        <xacro:if value="${not use_mesh_body}">
          <box size="${body_width} ${body_height} ${body_depth}" />
        </xacro:if>
      </geometry>
    </visual> 
    
    <collision>
      <geometry>
        <xacro:if value="${use_mesh_body}">
          <mesh filename="${mesh_filename}" scale="1.3 1 1" />
        </xacro:if>

        <xacro:if value="${not use_mesh_body}">
          <box size="${body_width} ${body_height} ${body_depth}" />
        </xacro:if>
      </geometry>
    </collision>

    <xacro:cuboid_inertia mass="${body_mass}" width="${body_width}"
      height="${body_height}" depth="${body_depth}" />
  </link>

  <!-- left and right side wheels -->
  <xacro:side_wheel prefix="left" reflect="1" />
  <xacro:side_wheel prefix="right" reflect="-1" />

  <!-- 2-DoF caster wheel -->
  <link name="caster_wheel">
    <visual>
      <material name="Grey" />
      <geometry>
        <sphere radius="${caster_wheel_radius}" />
      </geometry>
    </visual>

    <collision>
      <geometry>
        <sphere radius="${caster_wheel_radius}" />
      </geometry>
    </collision>

    <xacro:custom_inertia mass="${caster_wheel_mass}" 
      ixx="${2/5 * caster_wheel_mass * pow(caster_wheel_radius, 2)}"
      iyy="${2/5 * caster_wheel_mass * pow(caster_wheel_radius, 2)}"
      izz="${2/5 * caster_wheel_mass * pow(caster_wheel_radius, 2)}" />
  </link>

  <joint name="base_to_caster_wheel_yaw" type="continuous">
    <parent link="base_link" />
    <child link="caster_wheel_virtual" />
    <origin xyz="-${body_width/2} 0 -${body_depth/2 + caster_wheel_radius - side_wheel_offset_z}" />
    <axis xyz="0 0 1" />
  </joint>

  <link name="caster_wheel_virtual">
    <!-- Inertia is required in Gazebo -->
    <xacro:custom_inertia mass="0.001" />
  </link>

  <joint name="base_to_caster_wheel_roll" type="continuous">
    <parent link="caster_wheel_virtual" />
    <child link="caster_wheel" />
    <axis xyz="0 1 0" />
  </joint>

  <!-- KUKA LWR -->

  <xacro:include filename="$(find wheeled_robot_urdf)/urdf/kuka_lwr.urdf.xacro" />

  <joint name="base_to_manipulator" type="fixed">
    <parent link="base_link" />
    <child link="arm_base_link" />
    <origin xyz="0 0 ${body_depth/3}" />
  </joint>

</robot>
